{"version":3,"sources":["display/display.component.jsx","form/form.component.jsx","App.js","index.js"],"names":["Display","shortestPath","totalSteps","length","className","map","bucket","i","action","small","large","schemaValidation","yup","shape","bucketA","typeError","integer","required","positive","min","max","bucketB","bucketGoal","when","test","name","this","parent","createError","message","path","Form","addValues","useForm","mode","resolver","yupResolver","register","handleSubmit","reset","formState","errors","isDirty","isValid","useState","bucketState","setShortestPath","setDisabled","getShortestPath","maxSmBucket","maxLgBucket","fillBucket","buckets","key","dumpBucket","lgToSm","quantityNeededToFillSmall","smToLg","quantityNeededToFillLarge","isRepeated","find","x","queue","push","lastPath","shift","lastState","states","Set","item","newPath","onSubmit","data","type","placeholder","maxLength","minLength","title","disabled","App","formValue","setFormValues","val","values","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1a5fb788.chunk.js","sourcesContent":["import \"./display.styles.scss\";\n\nexport const Display = ({ shortestPath }) => {\n  const totalSteps = shortestPath.length - 1;\n\n  return (\n    <div className=\"display__pairs\">\n      <h1 className=\"display__title\">Steps [Total: {totalSteps}]</h1>\n      <table>\n        <tbody>\n          <tr>\n            <th>Action</th>\n            <th>Bucket A</th>\n            <th>Bucket B</th>\n          </tr>\n          {shortestPath.map((bucket, i) => (\n            <tr key={i}>\n              <td>{bucket.action}</td>\n              <td>{bucket.small}</td>\n              <td>{bucket.large}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","/* eslint-disable no-unused-vars */\nimport \"./form.styles.scss\";\nimport { useState } from \"react\";\nimport { Display } from \"../display/display.component\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\n\nconst schemaValidation = yup.object().shape({\n  bucketA: yup\n    .number()\n    .typeError(\"Numeric value required\")\n    .integer()\n    .required()\n    .positive()\n    .min(1)\n    .max(100),\n  bucketB: yup\n    .number()\n    .typeError(\"Numeric value required\")\n    .integer()\n    .required()\n    .positive()\n    .min(1)\n    .max(100),\n  bucketGoal: yup\n    .number()\n    .typeError(\"Numeric value required\")\n    .integer()\n    .required()\n    .positive()\n    .min(1)\n    .max(100)\n    .when(\"bucketB\", (bucketB, bucketGoal) => {\n      return bucketB ? bucketGoal.max(bucketB) : bucketGoal.min(1);\n    })\n    .test({\n      name: \"test-is-odd\", // Your custom error id\n      test: function () {\n        const { bucketA, bucketB, bucketGoal } = this.parent; // Access the object data, here this.parent contains your data\n        if (bucketA % 2 === 0 && bucketGoal % 2 !== 0 && bucketB % 2 === 0) {\n          return this.createError({\n            message: `Two even buckets cannot result of an odd numbered goal value`, // Error message for the user\n            path: `bucketGoal`, // The object path where you want show the error\n          });\n        }\n        return true; // True for no error\n      },\n    }),\n});\n\nexport const Form = ({ addValues }) => {\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors, isDirty, isValid },\n  } = useForm({\n    mode: \"all\",\n    resolver: yupResolver(schemaValidation),\n  });\n\n  const [bucketState] = useState({ small: 0, large: 0, action: \"Initial\" });\n  const [shortestPath, setShortestPath] = useState();\n  const [disabled, setDisabled] = useState(false);\n\n  const onSubmit = (data) => {\n    const { bucketA, bucketB, bucketGoal } = data;\n\n    addValues(data);\n    getShortestPath(bucketA, bucketB, bucketGoal);\n\n    reset();\n    setDisabled(true);\n  };\n\n  const getShortestPath = (maxSmBucket, maxLgBucket, bucketGoal) => {\n    /** Breadth-First Search: BFS will not lead to an infinite loop and finds the shortest possible path between the root node and the goal via other accessible nodes. */\n    /** STEPS: \n      - Step One: Fill the large bucket and transfer its contents into the small bucket.\n      - Step Two: If large bucket becomes empty fill it with water.\n      - Step Three: If the small bucket becomes full empty it.\n      - Step Four: Repeat steps one, two, and three until any of the buckets contains exactly the goal amount of water. */\n\n    const fillBucket = (buckets, key = \"large\", max = maxLgBucket) => ({\n      ...buckets,\n      [key]: max,\n      action: \"Fill\",\n    });\n\n    const dumpBucket = (buckets, key = \"large\") => ({\n      ...buckets,\n      [key]: 0,\n      action: \"Empty\",\n    });\n\n    const lgToSm = ({ large, small }) => {\n      const quantityNeededToFillSmall = maxSmBucket - small;\n\n      return {\n        large:\n          large > quantityNeededToFillSmall\n            ? large - quantityNeededToFillSmall\n            : 0,\n        small:\n          large > quantityNeededToFillSmall\n            ? small + quantityNeededToFillSmall\n            : small + large,\n        action: \"Transfer Large to Small\",\n      };\n    };\n\n    const smToLg = ({ large, small }) => {\n      const quantityNeededToFillLarge = maxLgBucket - large;\n\n      return {\n        large:\n          small > quantityNeededToFillLarge\n            ? small - quantityNeededToFillLarge\n            : 0,\n        small:\n          small > quantityNeededToFillLarge\n            ? large + quantityNeededToFillLarge\n            : small + large,\n        action: \"Transfer Small to Large\",\n      };\n    };\n\n    const isRepeated = (path, { small, large }) =>\n      !!path.find((x) => x.small === small && x.large === large);\n\n    const queue = [];\n    const path = [];\n\n    path.push(bucketState);\n    queue.push(path);\n\n    while (queue.length) {\n      const lastPath = queue.shift();\n      const lastState = lastPath[lastPath.length - 1];\n\n      if (bucketGoal === lastState.large) return setShortestPath(lastPath);\n\n      const states = new Set([\n        fillBucket(lastState),\n        fillBucket(lastState, \"small\", maxSmBucket),\n        lgToSm(lastState),\n        smToLg(lastState),\n        dumpBucket(lastState),\n        dumpBucket(lastState, \"small\"),\n      ]);\n\n      for (let item of states) {\n        if (!isRepeated(lastPath, item)) {\n          const newPath = [...lastPath];\n          newPath.push(item);\n          queue.push(newPath);\n        }\n      }\n    }\n\n    return null;\n  };\n\n  return (\n    <div className=\"side-bar\">\n      <div className=\"side-bar__card\">\n        <h1 className=\"side-bar__title\">🪣 Bucket Challenge 🪣</h1>\n        <p className=\"side-bar__description\">\n          Given a lake of water, an oddly shaped <b>small</b> (Ex: 3 unit)\n          container (A) and an oddly shaped <b>large</b> (Ex: 5 unit) container\n          (B), find the most efficient steps to get the <b>goal</b> (Ex: 4\n          units) amount of water (C).\n        </p>\n        <form className=\"form\" onSubmit={handleSubmit(onSubmit)}>\n          <label className=\"form__label\">Bucket A</label>\n          <input\n            className={`form__input ${errors?.bucketA && \"error__input\"}`}\n            type=\"number\"\n            name=\"bucketA\"\n            placeholder=\"Enter Bucket A value\"\n            min=\"1\"\n            max=\"100\"\n            {...register(\"bucketA\")}\n          />\n\n          {errors.bucketA && (\n            <p className=\"error__message\">{errors.bucketA?.message}</p>\n          )}\n\n          <label className=\"form__label\">Bucket B</label>\n          <input\n            className={`form__input ${errors?.bucketB && \"error__input\"}`}\n            type=\"number\"\n            name=\"bucketB\"\n            placeholder=\"Enter Bucket B value\"\n            maxLength=\"3\"\n            minLength=\"1\"\n            min=\"1\"\n            {...register(\"bucketB\")}\n          />\n          {errors.bucketB && (\n            <p className=\"error__message\">{errors.bucketB?.message}</p>\n          )}\n\n          <label className=\"form__label\">Bucket Goal Amount</label>\n          <input\n            className={`form__input ${errors?.bucketGoal && \"error__input\"}`}\n            type=\"number\"\n            name=\"bucketGoal\"\n            placeholder=\"Enter goal value\"\n            maxLength=\"3\"\n            minLength=\"1\"\n            {...register(\"bucketGoal\")}\n          />\n          {errors.bucketGoal && (\n            <p className=\"error__message\">{errors.bucketGoal?.message}</p>\n          )}\n\n          <button\n            className=\"form__btn-submit\"\n            type=\"submit\"\n            title=\"Calculate\"\n            disabled={!isDirty || !isValid}\n          >\n            Calculate\n          </button>\n        </form>\n\n        {shortestPath && <Display shortestPath={shortestPath}></Display>}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport \"./App.scss\";\n\nimport { Form } from \"./form/form.component\";\n\nfunction App() {\n  const [formValue, setFormValues] = useState([]);\n\n  const addValues = (val) => {\n    let values = [...formValue, val];\n    setFormValues(values);\n  };\n\n  return (\n    <div className=\"app\">\n      <Form addValues={addValues}></Form>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}