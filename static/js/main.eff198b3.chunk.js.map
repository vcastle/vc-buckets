{"version":3,"sources":["display/display.component.jsx","form/form.component.jsx","form/validators/input-validator.component.jsx","form/validators/form-validator.component.jsx","App.js","index.js"],"names":["Display","shortestPath","totalSteps","length","className","map","bucket","i","small","large","Form","addValues","useState","bucketA","setBucketA","bucketB","setBucketB","bucketGoal","setBucketGoal","bucketState","setShortestPath","error","setErrors","disabled","setDisabled","handleChange","e","target","name","value","valToNum","Number","validateInput","maxLengthCheck","val","maxLength","slice","setDefaults","getShortestPath","maxSmBucket","maxLgBucket","fillBucket","buckets","key","max","dumpBucket","lgToSm","quantityNeededToFillSmall","smToLg","quantityNeededToFillLarge","isRepeated","path","find","x","queue","push","lastPath","shift","lastState","states","Set","item","newPath","onSubmit","preventDefault","validateForm","required","type","placeholder","minLength","onChange","onBlur","onInput","onFocus","title","App","formValue","setFormValues","values","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eff198b3.chunk.js","sourcesContent":["import \"./display.styles.scss\";\n\nexport const Display = ({ shortestPath }) => {\n  const totalSteps = shortestPath.length - 1;\n\n  return (\n    <div className=\"display__pairs\">\n      <h1 className=\"display__title\">Steps [Total: {totalSteps}]</h1>\n      <table>\n        {shortestPath.map((bucket, i) => (\n          <tbody key={i}>\n            <tr>\n              <th>Bucket A</th>\n              <th>Bucket B</th>\n            </tr>\n            <tr>\n              <td>{bucket.small}</td>\n              <td>{bucket.large}</td>\n            </tr>\n          </tbody>\n        ))}\n      </table>\n    </div>\n  );\n};\n","/* eslint-disable no-unused-vars */\nimport \"./form.styles.scss\";\nimport { useState } from \"react\";\n\nimport validateInput from \"./validators/input-validator.component\";\nimport validateForm from \"./validators/form-validator.component\";\nimport { Display } from \"../display/display.component\";\n\nexport const Form = ({ addValues }) => {\n  const [bucketA, setBucketA] = useState();\n  const [bucketB, setBucketB] = useState();\n  const [bucketGoal, setBucketGoal] = useState();\n  const [bucketState] = useState({ small: 0, large: 0 });\n  const [shortestPath, setShortestPath] = useState();\n  const [error, setErrors] = useState({});\n  const [disabled, setDisabled] = useState(true);\n\n  /** HANDLE CHANGE */\n  const handleChange = (e) => {\n    const bucket = e.target.name;\n    const error = validateInput(e.target.value);\n\n    switch (bucket) {\n      case \"bucketA\":\n        setBucketA(Number(e.target.value));\n        break;\n      case \"bucketB\":\n        setBucketB(Number(e.target.value));\n        break;\n      case \"bucketGoal\":\n        setBucketGoal(Number(e.target.value));\n        break;\n\n      default:\n    }\n\n    if (error.length > 0) {\n      setDisabled(true);\n      setErrors({ [bucket]: error });\n    } else {\n      setErrors(null);\n      setDisabled(false);\n    }\n  };\n\n  /** CHECK MAX LENGTH */\n  const maxLengthCheck = (val) => {\n    if (val.target.value.length > val.target.maxLength) {\n      val.target.value = val.target.value.slice(0, val.target.maxLength);\n    }\n  };\n\n  /** ON SUBMIT */\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    // form validation\n    const error = validateForm(bucketA, bucketB, bucketGoal);\n\n    if (error.length > 0) {\n      setDisabled(true);\n      setErrors({ bucketGoal: error });\n      return;\n    } else {\n      addValues([bucketA, bucketB, bucketGoal]);\n      // Find path\n      getShortestPath(bucketA, bucketB, bucketGoal);\n\n      setDefaults();\n    }\n  };\n\n  const setDefaults = () => {\n    setBucketA(null);\n    setBucketB(null);\n    setBucketGoal(null);\n    setErrors(null);\n  };\n\n  const getShortestPath = (maxSmBucket, maxLgBucket, bucketGoal) => {\n    /** Breadth-First Search: BFS will not lead to an infinite loop and finds the shortest possible path between the root node and the goal via other accessible nodes. */\n    /** STEPS \n      - Step One: Fill the large bucket and transfer its contents into the small bucket.\n      - Step Two: If at any instant large bucket becomes empty fill it with water.\n      - Step Three: If at any instant the small bucket becomes full empty it.\n      - Step Four: Repeat steps one, two, and three until any of the buckets contains exactly the goal amount of water. */\n\n    const fillBucket = (buckets, key = \"large\", max = maxLgBucket) => ({\n      ...buckets,\n      [key]: max,\n    });\n\n    const dumpBucket = (buckets, key = \"large\") => ({ ...buckets, [key]: 0 });\n\n    const lgToSm = ({ large, small }) => {\n      const quantityNeededToFillSmall = maxSmBucket - small;\n\n      return {\n        large:\n          large > quantityNeededToFillSmall\n            ? large - quantityNeededToFillSmall\n            : 0,\n        small:\n          large > quantityNeededToFillSmall\n            ? small + quantityNeededToFillSmall\n            : small + large,\n      };\n    };\n\n    const smToLg = ({ large, small }) => {\n      const quantityNeededToFillLarge = maxLgBucket - large;\n\n      return {\n        large:\n          small > quantityNeededToFillLarge\n            ? small - quantityNeededToFillLarge\n            : 0,\n        small:\n          small > quantityNeededToFillLarge\n            ? large + quantityNeededToFillLarge\n            : small + large,\n      };\n    };\n\n    const isRepeated = (path, { small, large }) =>\n      !!path.find((x) => x.small === small && x.large === large);\n\n    const queue = [];\n    const path = [];\n\n    path.push(bucketState);\n    queue.push(path);\n\n    while (queue.length) {\n      const lastPath = queue.shift();\n      const lastState = lastPath[lastPath.length - 1];\n\n      if (bucketGoal === lastState.large) return setShortestPath(lastPath);\n\n      const states = new Set([\n        fillBucket(lastState),\n        fillBucket(lastState, \"small\", maxSmBucket),\n        lgToSm(lastState),\n        smToLg(lastState),\n        dumpBucket(lastState),\n        dumpBucket(lastState, \"small\"),\n      ]);\n\n      for (let item of states) {\n        if (!isRepeated(lastPath, item)) {\n          const newPath = [...lastPath];\n          newPath.push(item);\n          queue.push(newPath);\n        }\n      }\n    }\n\n    return null;\n  };\n\n  return (\n    <div className=\"side-bar\">\n      <div className=\"side-bar__card\">\n        <h1 className=\"side-bar__title\">🪣 Bucket Challenge 🪣</h1>\n        <p className=\"side-bar__description\">\n          Given a lake of water, an oddly shaped <b>small</b> (Ex: 3 unit)\n          container (A) and an oddly shaped <b>large</b> (Ex: 5 unit) container\n          (B), find the most efficient steps to get the <b>goal</b> (Ex: 4\n          units) amount of water (C).\n        </p>\n        <form className=\"form\" onSubmit={onSubmit}>\n          <label className=\"form__label\">Bucket A</label>\n          <input\n            required\n            className={`form__input ${error?.bucketA && \"error__input\"}`}\n            type=\"text\"\n            name=\"bucketA\"\n            placeholder=\"Enter Bucket A value\"\n            maxLength=\"3\"\n            minLength=\"1\"\n            onChange={handleChange}\n            onBlur={handleChange}\n            onInput={maxLengthCheck}\n            value={bucketA || \"\"}\n          />\n          {error?.bucketA && <p className=\"error__message\">{error?.bucketA}</p>}\n\n          <label className=\"form__label\">Bucket B</label>\n          <input\n            required\n            className={`form__input ${error?.bucketB && \"error__input\"}`}\n            type=\"text\"\n            name=\"bucketB\"\n            placeholder=\"Enter Bucket B value\"\n            maxLength=\"3\"\n            minLength=\"1\"\n            onChange={handleChange}\n            onBlur={handleChange}\n            onFocus={handleChange}\n            onInput={maxLengthCheck}\n            value={bucketB || \"\"}\n          />\n          {error?.bucketB && <p className=\"error__message\">{error?.bucketB}</p>}\n\n          <label className=\"form__label\">Bucket Goal Amount</label>\n          <input\n            required\n            className={`form__input ${error?.bucketGoal && \"error__input\"}`}\n            type=\"text\"\n            name=\"bucketGoal\"\n            placeholder=\"Enter goal value\"\n            maxLength=\"3\"\n            minLength=\"1\"\n            onChange={handleChange}\n            onBlur={handleChange}\n            onFocus={handleChange}\n            onInput={maxLengthCheck}\n            value={bucketGoal || \"\"}\n          />\n          {error?.bucketGoal && (\n            <p className=\"error__message\">{error?.bucketGoal}</p>\n          )}\n\n          <button\n            className=\"form__btn-submit\"\n            type=\"submit\"\n            title=\"Calculate\"\n            disabled={disabled}\n          >\n            Calculate\n          </button>\n        </form>\n\n        {shortestPath && <Display shortestPath={shortestPath}></Display>}\n      </div>\n    </div>\n  );\n};\n","export default function validateInput(value) {\n  let error = {};\n  const valToNum = Number(value);\n\n  if (!valToNum) {\n    error = \"Numeric value required\";\n  } else if (valToNum < 0 || valToNum > 100) {\n    error = \"Enter a number between 1 and 100\";\n  }\n\n  return error;\n}\n","export default function validateForm(bucketA, bucketB, bucketGoal) {\n  let error = {};\n\n  if (bucketGoal > bucketB) {\n    /** Goal bucket cannot be larger than the largest bucket. */\n    error = \"Goal value cannot be more than values of bucket B\";\n  } else if (bucketA % 2 === 0 && bucketB % 2 === 0 && bucketGoal % 2 !== 0) {\n    /**\tTwo even buckets cannot get result in an odd number. */\n    error = \"Two even buckets cannot result of an odd numbered goal value\";\n  }\n\n  return error;\n}\n","import React, { useState } from \"react\";\nimport \"./App.scss\";\n\nimport { Form } from \"./form/form.component\";\n\nfunction App() {\n  const [formValue, setFormValues] = useState([]);\n\n  const addValues = (val) => {\n    let values = [...formValue, val];\n    setFormValues(values);\n  };\n\n  return (\n    <div className=\"grid\">\n      <Form addValues={addValues}></Form>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}